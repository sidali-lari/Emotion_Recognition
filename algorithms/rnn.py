# -*- coding: utf-8 -*-
"""resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TPmsLZxIufItxQIt0VY4_9kfbUHBNyOs

# importing necessary libraries
"""

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
from imblearn.over_sampling import SMOTE
from sklearn.utils import class_weight

"""# Importing dataset"""

df_gsr = pd.read_csv('GSR_FeaturesExtracted.csv')
df_ecg = pd.read_csv('ECG_FeaturesExtracted.csv')
df_eye_tracking = pd.read_csv('EyeTracking_FeaturesExtracted.csv')
#df_gsr_ecg = pd.read_csv('GSR+ECG.csv')
df_all_data = pd.read_csv('all_data.csv')

"""# GSR"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, precision_score, recall_score, f1_score
from sklearn.model_selection import RandomizedSearchCV
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
import tensorflow as tf



t
X = df_gsr.drop('Quad_Cat', axis=1).values
y = df_gsr['Quad_Cat'].values

# Scaling the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Converting labels to integer then to categorical
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)
y_categorical = to_categorical(y_encoded)

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_categorical, test_size=0.1, random_state=42)

# Reshape data
X_train_reshaped = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test_reshaped = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Define the ResNet block for 1D signals
def resnet_block(input_data, filters, conv_size):
    x = Conv1D(filters, conv_size, activation='relu', padding='same')(input_data)
    x = BatchNormalization()(x)
    x = Conv1D(filters, conv_size, activation=None, padding='same')(x)
    x = BatchNormalization()(x)


    if input_data.shape[-1] != filters:
        input_data = Conv1D(filters, 1, activation=None, padding='same')(input_data)
        input_data = BatchNormalization()(input_data)

    x = Add()([x, input_data])
    x = Activation('relu')(x)
    return x


# ResNet model for 1D signals
def build_resnet(input_shape, num_classes, filters=32):
    inputs = Input(shape=input_shape)

    x = Conv1D(16, 3, activation='relu')(inputs)
    x = Conv1D(32, 3, activation='relu')(x)
    x = BatchNormalization()(x)

    # resnet blocks
    x = resnet_block(x, filters, 3)
    x = resnet_block(x, filters, 3)

    x = GlobalAveragePooling1D()(x)
    x = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs=inputs, outputs=x)

    return model

# Hyperparameter tuning
def create_model(filters, learning_rate):
    model = build_resnet(input_shape, num_classes, filters)
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),
                  loss='categorical_crossentropy', metrics=['accuracy'])
    return model

model = KerasClassifier(build_fn=create_model, verbose=0)

param_grid = {
    'filters': [16, 32, 64],
    'learning_rate': [0.001, 0.01, 0.1]
}

search = RandomizedSearchCV(model, param_distributions=param_grid, n_iter=10, cv=3)
search_result = search.fit(X_train_reshaped, y_train)

print("Best: %f using %s" % (search_result.best_score_, search_result.best_params_))

# model with best hyperparameters
best_filters = search_result.best_params_['filters']
best_learning_rate = search_result.best_params_['learning_rate']
best_model = build_resnet(input_shape, num_classes, filters=best_filters)
best_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=best_learning_rate),
                   loss='categorical_crossentropy', metrics=['accuracy'])

# early stopping for better generalization
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)

# Training
best_model.fit(X_train_reshaped, y_train, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Predict on test set
y_pred = best_model.predict(X_test_reshaped)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)

# Calculate precision, recall, and F1-score
precision = precision_score(y_true, y_pred_classes, average='weighted')
recall = recall_score(y_true, y_pred_classes, average='weighted')
f1 = f1_score(y_true, y_pred_classes, average='weighted')

print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

print("\nDetailed classification report:\n")
print(classification_report(y_true, y_pred_classes, target_names=[str(i) for i in encoder.classes_]))

"""# GSR Arousal"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report

# Rest of your code...

# Mapping for arousal
arousal_mapping = {0: 'High Arousal', 1: 'Low Arousal', 2: 'Low Arousal', 3: 'High Arousal'}
df_gsr['Arousal'] = df_gsr['Quad_Cat'].map(arousal_mapping)

X_arousal = df_gsr.drop(['Quad_Cat', 'Arousal'], axis=1).values
y_arousal = df_gsr['Arousal'].values

scaler = StandardScaler()
X_arousal_scaled = scaler.fit_transform(X_arousal)

encoder = LabelEncoder()
y_arousal_encoded = encoder.fit_transform(y_arousal)
y_arousal_categorical = to_categorical(y_arousal_encoded)

X_train_arousal, X_test_arousal, y_train_arousal, y_test_arousal = train_test_split(X_arousal_scaled, y_arousal_categorical, test_size=0.1, random_state=42)
X_train_arousal_reshaped = X_train_arousal.reshape(X_train_arousal.shape[0], X_train_arousal.shape[1], 1)
X_test_arousal_reshaped = X_test_arousal.reshape(X_test_arousal.shape[0], X_test_arousal.shape[1], 1)

# Build, compile and fit the ResNet model for arousal
input_shape_arousal = (X_train_arousal_reshaped.shape[1], X_train_arousal_reshaped.shape[2])
num_classes_arousal = y_arousal_categorical.shape[1]

model_arousal = build_resnet(input_shape_arousal, num_classes_arousal)
model_arousal.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)
model_arousal.fit(X_train_arousal_reshaped, y_train_arousal, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluation for arousal
y_pred_arousal = model_arousal.predict(X_test_arousal_reshaped)
y_pred_classes_arousal = np.argmax(y_pred_arousal, axis=1)
y_true_arousal = np.argmax(y_test_arousal, axis=1)

print("Arousal Classification Report:")
print(classification_report(y_true_arousal, y_pred_classes_arousal, target_names=encoder.classes_))

from keras.utils import plot_model
plot_model(model_arousal, to_file = 'model_plot.png', show_shapes = True, show_layer_names=True)

"""# GSR Valence"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report


# Mapping for arousal
arousal_mapping = {0: 'High Arousal', 1: 'Low Arousal', 2: 'Low Arousal', 3: 'High Arousal'}
df_gsr['Arousal'] = df_gsr['Quad_Cat'].map(arousal_mapping)

X_arousal = df_gsr.drop(['Quad_Cat', 'Arousal'], axis=1).values
y_arousal = df_gsr['Arousal'].values

scaler = StandardScaler()
X_arousal_scaled = scaler.fit_transform(X_arousal)

encoder = LabelEncoder()
y_arousal_encoded = encoder.fit_transform(y_arousal)
y_arousal_categorical = to_categorical(y_arousal_encoded)

X_train_arousal, X_test_arousal, y_train_arousal, y_test_arousal = train_test_split(X_arousal_scaled, y_arousal_categorical, test_size=0.1, random_state=42)
X_train_arousal_reshaped = X_train_arousal.reshape(X_train_arousal.shape[0], X_train_arousal.shape[1], 1)
X_test_arousal_reshaped = X_test_arousal.reshape(X_test_arousal.shape[0], X_test_arousal.shape[1], 1)

#ResNet model for arousal
input_shape_arousal = (X_train_arousal_reshaped.shape[1], X_train_arousal_reshaped.shape[2])
num_classes_arousal = y_arousal_categorical.shape[1]

model_arousal = build_resnet(input_shape_arousal, num_classes_arousal)
model_arousal.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)
model_arousal.fit(X_train_arousal_reshaped, y_train_arousal, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluation for arousal
y_pred_arousal = model_arousal.predict(X_test_arousal_reshaped)
y_pred_classes_arousal = np.argmax(y_pred_arousal, axis=1)
y_true_arousal = np.argmax(y_test_arousal, axis=1)

print("Arousal Classification Report:")
print(classification_report(y_true_arousal, y_pred_classes_arousal, target_names=encoder.classes_))


# Mapping for valence
valence_mapping = {0: 'High Valence', 1: 'High Valence', 2: 'Low Valence', 3: 'Low Valence'}
df_gsr['Valence'] = df_gsr['Quad_Cat'].map(valence_mapping)

X_valence = df_gsr.drop(['Quad_Cat', 'Valence'], axis=1).values
y_valence = df_gsr['Valence'].values

scaler = StandardScaler()
X_valence_scaled = scaler.fit_transform(X_valence)

encoder = LabelEncoder()
y_valence_encoded = encoder.fit_transform(y_valence)
y_valence_categorical = to_categorical(y_valence_encoded)

X_train_valence, X_test_valence, y_train_valence, y_test_valence = train_test_split(X_valence_scaled, y_valence_categorical, test_size=0.1, random_state=42)
X_train_valence_reshaped = X_train_valence.reshape(X_train_valence.shape[0], X_train_valence.shape[1], 1)
X_test_valence_reshaped = X_test_valence.reshape(X_test_valence.shape[0], X_test_valence.shape[1], 1)

# ResNet model for valence
input_shape_valence = (X_train_valence_reshaped.shape[1], X_train_valence_reshaped.shape[2])
num_classes_valence = y_valence_categorical.shape[1]

model_valence = build_resnet(input_shape_valence, num_classes_valence)
model_valence.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model_valence.fit(X_train_valence_reshaped, y_train_valence, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluation for valence
y_pred_valence = model_valence.predict(X_test_valence_reshaped)
y_pred_classes_valence = np.argmax(y_pred_valence, axis=1)
y_true_valence = np.argmax(y_test_valence, axis=1)

print("Valence Classification Report:")
print(classification_report(y_true_valence, y_pred_classes_valence, target_names=encoder.classes_))

"""# ECG"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, precision_score, recall_score, f1_score
from sklearn.model_selection import RandomizedSearchCV
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier


X = df_ecg.drop('Quad_Cat', axis=1).values
y = df_ecg['Quad_Cat'].values

# Scaling the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Converting labels to integer then to categorical
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)
y_categorical = to_categorical(y_encoded)

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_categorical, test_size=0.1, random_state=42)


num_time_steps = 8
X_train_reshaped = X_train[:, :num_time_steps].reshape(X_train.shape[0], num_time_steps, 1)
X_test_reshaped = X_test[:, :num_time_steps].reshape(X_test.shape[0], num_time_steps, 1)



#  ResNet block for 1D signals
def resnet_block(input_data, filters, conv_size):
    x = Conv1D(filters, conv_size, activation='relu', padding='same')(input_data)
    x = BatchNormalization()(x)
    x = Conv1D(filters, conv_size, activation=None, padding='same')(x)
    x = BatchNormalization()(x)


    if input_data.shape[-1] != filters:
        input_data = Conv1D(filters, 1, activation=None, padding='same')(input_data)
        input_data = BatchNormalization()(input_data)

    x = Add()([x, input_data])
    x = Activation('relu')(x)
    return x

#  ResNet model for 1D signals
def build_resnet(input_shape, num_classes, filters=32):
    inputs = Input(shape=input_shape)

    x = Conv1D(16, 3, activation='relu')(inputs)
    x = Conv1D(32, 3, activation='relu')(x)
    x = BatchNormalization()(x)

    # resnet blocks
    x = resnet_block(x, filters, 3)
    x = resnet_block(x, filters, 3)

    x = GlobalAveragePooling1D()(x)
    x = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs=inputs, outputs=x)

    return model

# Hyperparameter tuning
def create_model(filters, learning_rate):
    model = build_resnet(input_shape, num_classes, filters)
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),
                  loss='categorical_crossentropy', metrics=['accuracy'])
    return model

model = KerasClassifier(build_fn=create_model, verbose=0)

param_grid = {
    'filters': [16, 32, 64],
    'learning_rate': [0.001, 0.01, 0.1]
}

search = RandomizedSearchCV(model, param_distributions=param_grid, n_iter=10, cv=3)
search_result = search.fit(X_train_reshaped, y_train)

print("Best: %f using %s" % (search_result.best_score_, search_result.best_params_))

#  model with best hyperparameters
best_filters = search_result.best_params_['filters']
best_learning_rate = search_result.best_params_['learning_rate']
best_model = build_resnet(input_shape, num_classes, filters=best_filters)
best_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=best_learning_rate),
                   loss='categorical_crossentropy', metrics=['accuracy'])

# early stopping for better generalization
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)

# Training
best_model.fit(X_train_reshaped, y_train, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Prediction
y_pred = best_model.predict(X_test_reshaped)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)

#  precision, recall, and F1-score
precision = precision_score(y_true, y_pred_classes, average='weighted')
recall = recall_score(y_true, y_pred_classes, average='weighted')
f1 = f1_score(y_true, y_pred_classes, average='weighted')

print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

print("\nDetailed classification report:\n")
print(classification_report(y_true, y_pred_classes, target_names=[str(i) for i in encoder.classes_]))

"""# ECG Arousal"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report



# Mapping for arousal
arousal_mapping = {0: 'High Arousal', 1: 'Low Arousal', 2: 'Low Arousal', 3: 'High Arousal'}
df_ecg['Arousal'] = df_ecg['Quad_Cat'].map(arousal_mapping)

X_arousal = df_ecg.drop(['Quad_Cat', 'Arousal'], axis=1).values
y_arousal = df_ecg['Arousal'].values

scaler = StandardScaler()
X_arousal_scaled = scaler.fit_transform(X_arousal)

encoder = LabelEncoder()
y_arousal_encoded = encoder.fit_transform(y_arousal)
y_arousal_categorical = to_categorical(y_arousal_encoded)

X_train_arousal, X_test_arousal, y_train_arousal, y_test_arousal = train_test_split(X_arousal_scaled, y_arousal_categorical, test_size=0.1, random_state=42)
X_train_arousal_reshaped = X_train_arousal.reshape(X_train_arousal.shape[0], X_train_arousal.shape[1], 1)
X_test_arousal_reshaped = X_test_arousal.reshape(X_test_arousal.shape[0], X_test_arousal.shape[1], 1)

# fiting the ResNet model for arousal
input_shape_arousal = (X_train_arousal_reshaped.shape[1], X_train_arousal_reshaped.shape[2])
num_classes_arousal = y_arousal_categorical.shape[1]

model_arousal = build_resnet(input_shape_arousal, num_classes_arousal)
model_arousal.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)
model_arousal.fit(X_train_arousal_reshaped, y_train_arousal, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluation for arousal
y_pred_arousal = model_arousal.predict(X_test_arousal_reshaped)
y_pred_classes_arousal = np.argmax(y_pred_arousal, axis=1)
y_true_arousal = np.argmax(y_test_arousal, axis=1)

print("Arousal Classification Report:")
print(classification_report(y_true_arousal, y_pred_classes_arousal, target_names=encoder.classes_))

"""# ECG Valence"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report


# Mapping for arousal
arousal_mapping = {0: 'High Arousal', 1: 'Low Arousal', 2: 'Low Arousal', 3: 'High Arousal'}
df_ecg['Arousal'] = df_ecg['Quad_Cat'].map(arousal_mapping)

X_arousal = df_ecg.drop(['Quad_Cat', 'Arousal'], axis=1).values
y_arousal = df_ecg['Arousal'].values

scaler = StandardScaler()
X_arousal_scaled = scaler.fit_transform(X_arousal)

encoder = LabelEncoder()
y_arousal_encoded = encoder.fit_transform(y_arousal)
y_arousal_categorical = to_categorical(y_arousal_encoded)

X_train_arousal, X_test_arousal, y_train_arousal, y_test_arousal = train_test_split(X_arousal_scaled, y_arousal_categorical, test_size=0.1, random_state=42)
X_train_arousal_reshaped = X_train_arousal.reshape(X_train_arousal.shape[0], X_train_arousal.shape[1], 1)
X_test_arousal_reshaped = X_test_arousal.reshape(X_test_arousal.shape[0], X_test_arousal.shape[1], 1)

# fiting the ResNet model for arousal
input_shape_arousal = (X_train_arousal_reshaped.shape[1], X_train_arousal_reshaped.shape[2])
num_classes_arousal = y_arousal_categorical.shape[1]

model_arousal = build_resnet(input_shape_arousal, num_classes_arousal)
model_arousal.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)
model_arousal.fit(X_train_arousal_reshaped, y_train_arousal, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluation for arousal
y_pred_arousal = model_arousal.predict(X_test_arousal_reshaped)
y_pred_classes_arousal = np.argmax(y_pred_arousal, axis=1)
y_true_arousal = np.argmax(y_test_arousal, axis=1)

print("Arousal Classification Report:")
print(classification_report(y_true_arousal, y_pred_classes_arousal, target_names=encoder.classes_))


# Mapping for valence
valence_mapping = {0: 'High Valence', 1: 'High Valence', 2: 'Low Valence', 3: 'Low Valence'}
df_gsr['Valence'] = df_gsr['Quad_Cat'].map(valence_mapping)

X_valence = df_gsr.drop(['Quad_Cat', 'Valence'], axis=1).values
y_valence = df_gsr['Valence'].values

scaler = StandardScaler()
X_valence_scaled = scaler.fit_transform(X_valence)

encoder = LabelEncoder()
y_valence_encoded = encoder.fit_transform(y_valence)
y_valence_categorical = to_categorical(y_valence_encoded)

X_train_valence, X_test_valence, y_train_valence, y_test_valence = train_test_split(X_valence_scaled, y_valence_categorical, test_size=0.1, random_state=42)
X_train_valence_reshaped = X_train_valence.reshape(X_train_valence.shape[0], X_train_valence.shape[1], 1)
X_test_valence_reshaped = X_test_valence.reshape(X_test_valence.shape[0], X_test_valence.shape[1], 1)

# fiting the ResNet model for valence
input_shape_valence = (X_train_valence_reshaped.shape[1], X_train_valence_reshaped.shape[2])
num_classes_valence = y_valence_categorical.shape[1]

model_valence = build_resnet(input_shape_valence, num_classes_valence)
model_valence.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model_valence.fit(X_train_valence_reshaped, y_train_valence, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluation for valence
y_pred_valence = model_valence.predict(X_test_valence_reshaped)
y_pred_classes_valence = np.argmax(y_pred_valence, axis=1)
y_true_valence = np.argmax(y_test_valence, axis=1)

print("Valence Classification Report:")
print(classification_report(y_true_valence, y_pred_classes_valence, target_names=encoder.classes_))

"""## Eye Tracking"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, precision_score, recall_score, f1_score
from sklearn.model_selection import RandomizedSearchCV
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier


X = df_eye_tracking.drop('Quad_Cat', axis=1).values
y = df_eye_tracking['Quad_Cat'].values

# Scaling the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Converting labels to integer then to categorical
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)
y_categorical = to_categorical(y_encoded)

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_categorical, test_size=0.1, random_state=42)


num_time_steps = 8
X_train_reshaped = X_train[:, :num_time_steps].reshape(X_train.shape[0], num_time_steps, 1)
X_test_reshaped = X_test[:, :num_time_steps].reshape(X_test.shape[0], num_time_steps, 1)




# ResNet block for 1D signals
def resnet_block(input_data, filters, conv_size):
    x = Conv1D(filters, conv_size, activation='relu', padding='same')(input_data)
    x = BatchNormalization()(x)
    x = Conv1D(filters, conv_size, activation=None, padding='same')(x)
    x = BatchNormalization()(x)


    if input_data.shape[-1] != filters:
        input_data = Conv1D(filters, 1, activation=None, padding='same')(input_data)
        input_data = BatchNormalization()(input_data)

    x = Add()([x, input_data])
    x = Activation('relu')(x)
    return x

# ResNet model for 1D signals
def build_resnet(input_shape, num_classes, filters=32):
    inputs = Input(shape=input_shape)

    x = Conv1D(16, 3, activation='relu')(inputs)
    x = Conv1D(32, 3, activation='relu')(x)
    x = BatchNormalization()(x)

    # resnet blocks
    x = resnet_block(x, filters, 3)
    x = resnet_block(x, filters, 3)

    x = GlobalAveragePooling1D()(x)
    x = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs=inputs, outputs=x)

    return model

# Hyperparameter tuning
def create_model(filters, learning_rate):
    model = build_resnet(input_shape, num_classes, filters)
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),
                  loss='categorical_crossentropy', metrics=['accuracy'])
    return model

model = KerasClassifier(build_fn=create_model, verbose=0)

param_grid = {
    'filters': [16, 32, 64],
    'learning_rate': [0.001, 0.01, 0.1]
}

search = RandomizedSearchCV(model, param_distributions=param_grid, n_iter=10, cv=3)
search_result = search.fit(X_train_reshaped, y_train)

print("Best: %f using %s" % (search_result.best_score_, search_result.best_params_))

#  model with best hyperparameters
best_filters = search_result.best_params_['filters']
best_learning_rate = search_result.best_params_['learning_rate']
best_model = build_resnet(input_shape, num_classes, filters=best_filters)
best_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=best_learning_rate),
                   loss='categorical_crossentropy', metrics=['accuracy'])

# early stopping for better generalization
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)

# Training the model
best_model.fit(X_train_reshaped, y_train, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Prediction on test set
y_pred = best_model.predict(X_test_reshaped)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)

# precision, recall, and F1-score
precision = precision_score(y_true, y_pred_classes, average='weighted')
recall = recall_score(y_true, y_pred_classes, average='weighted')
f1 = f1_score(y_true, y_pred_classes, average='weighted')

print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

print("\nDetailed classification report:\n")
print(classification_report(y_true, y_pred_classes, target_names=[str(i) for i in encoder.classes_]))

"""# arousal eye tracking"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report



# Mapping for arousal
arousal_mapping = {0: 'High Arousal', 1: 'Low Arousal', 2: 'Low Arousal', 3: 'High Arousal'}
df_eye_tracking['Arousal'] = df_eye_tracking['Quad_Cat'].map(arousal_mapping)

X_arousal = df_eye_tracking.drop(['Quad_Cat', 'Arousal'], axis=1).values
y_arousal = df_eye_tracking['Arousal'].values

scaler = StandardScaler()
X_arousal_scaled = scaler.fit_transform(X_arousal)

encoder = LabelEncoder()
y_arousal_encoded = encoder.fit_transform(y_arousal)
y_arousal_categorical = to_categorical(y_arousal_encoded)

X_train_arousal, X_test_arousal, y_train_arousal, y_test_arousal = train_test_split(X_arousal_scaled, y_arousal_categorical, test_size=0.1, random_state=42)
X_train_arousal_reshaped = X_train_arousal.reshape(X_train_arousal.shape[0], X_train_arousal.shape[1], 1)
X_test_arousal_reshaped = X_test_arousal.reshape(X_test_arousal.shape[0], X_test_arousal.shape[1], 1)

# fiting the ResNet model for arousal
input_shape_arousal = (X_train_arousal_reshaped.shape[1], X_train_arousal_reshaped.shape[2])
num_classes_arousal = y_arousal_categorical.shape[1]

model_arousal = build_resnet(input_shape_arousal, num_classes_arousal)
model_arousal.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)
model_arousal.fit(X_train_arousal_reshaped, y_train_arousal, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluation for arousal
y_pred_arousal = model_arousal.predict(X_test_arousal_reshaped)
y_pred_classes_arousal = np.argmax(y_pred_arousal, axis=1)
y_true_arousal = np.argmax(y_test_arousal, axis=1)

print("Arousal Classification Report:")
print(classification_report(y_true_arousal, y_pred_classes_arousal, target_names=encoder.classes_))

"""## Vlence Eye Tracking"""



"""## All data"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, precision_score, recall_score, f1_score
from sklearn.model_selection import RandomizedSearchCV
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier

X = df_all_data.drop('Quad_Cat', axis=1).values
y = df_all_data['Quad_Cat'].values

# Scaling the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Converting labels to integer then to categorical
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)
y_categorical = to_categorical(y_encoded)

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_categorical, test_size=0.1, random_state=42)


num_time_steps = 8
X_train_reshaped = X_train[:, :num_time_steps].reshape(X_train.shape[0], num_time_steps, 1)
X_test_reshaped = X_test[:, :num_time_steps].reshape(X_test.shape[0], num_time_steps, 1)



#  ResNet block for 1D signals
def resnet_block(input_data, filters, conv_size):
    x = Conv1D(filters, conv_size, activation='relu', padding='same')(input_data)
    x = BatchNormalization()(x)
    x = Conv1D(filters, conv_size, activation=None, padding='same')(x)
    x = BatchNormalization()(x)


    if input_data.shape[-1] != filters:
        input_data = Conv1D(filters, 1, activation=None, padding='same')(input_data)
        input_data = BatchNormalization()(input_data)

    x = Add()([x, input_data])
    x = Activation('relu')(x)
    return x

#  ResNet model for 1D signals
def build_resnet(input_shape, num_classes, filters=32):
    inputs = Input(shape=input_shape)

    x = Conv1D(16, 3, activation='relu')(inputs)
    x = Conv1D(32, 3, activation='relu')(x)
    x = BatchNormalization()(x)

    # resnet blocks
    x = resnet_block(x, filters, 3)
    x = resnet_block(x, filters, 3)

    x = GlobalAveragePooling1D()(x)
    x = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs=inputs, outputs=x)

    return model

# Hyperparameter tuning
def create_model(filters, learning_rate):
    model = build_resnet(input_shape, num_classes, filters)
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),
                  loss='categorical_crossentropy', metrics=['accuracy'])
    return model

model = KerasClassifier(build_fn=create_model, verbose=0)

param_grid = {
    'filters': [16, 32, 64],
    'learning_rate': [0.001, 0.01, 0.1]
}

search = RandomizedSearchCV(model, param_distributions=param_grid, n_iter=10, cv=3)
search_result = search.fit(X_train_reshaped, y_train)

print("Best: %f using %s" % (search_result.best_score_, search_result.best_params_))

#  model with best hyperparameters
best_filters = search_result.best_params_['filters']
best_learning_rate = search_result.best_params_['learning_rate']
best_model = build_resnet(input_shape, num_classes, filters=best_filters)
best_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=best_learning_rate),
                   loss='categorical_crossentropy', metrics=['accuracy'])

# early stopping for better generalization
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)

# Training the model
best_model.fit(X_train_reshaped, y_train, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Prediction on test set
y_pred = best_model.predict(X_test_reshaped)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)

#  precision, recall, and F1-score
precision = precision_score(y_true, y_pred_classes, average='weighted')
recall = recall_score(y_true, y_pred_classes, average='weighted')
f1 = f1_score(y_true, y_pred_classes, average='weighted')

print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

print("\nDetailed classification report:\n")
print(classification_report(y_true, y_pred_classes, target_names=[str(i) for i in encoder.classes_]))

"""# all data arousal"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, BatchNormalization, Activation, Add, GlobalAveragePooling1D, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report



# Mapping for arousal
arousal_mapping = {0: 'High Arousal', 1: 'Low Arousal', 2: 'Low Arousal', 3: 'High Arousal'}
df_all_data['Arousal'] = df_all_data['Quad_Cat'].map(arousal_mapping)

X_arousal = df_all_data.drop(['Quad_Cat', 'Arousal'], axis=1).values
y_arousal = df_all_data['Arousal'].values

scaler = StandardScaler()
X_arousal_scaled = scaler.fit_transform(X_arousal)

encoder = LabelEncoder()
y_arousal_encoded = encoder.fit_transform(y_arousal)
y_arousal_categorical = to_categorical(y_arousal_encoded)

X_train_arousal, X_test_arousal, y_train_arousal, y_test_arousal = train_test_split(X_arousal_scaled, y_arousal_categorical, test_size=0.1, random_state=42)
X_train_arousal_reshaped = X_train_arousal.reshape(X_train_arousal.shape[0], X_train_arousal.shape[1], 1)
X_test_arousal_reshaped = X_test_arousal.reshape(X_test_arousal.shape[0], X_test_arousal.shape[1], 1)

# ResNet model for arousal
input_shape_arousal = (X_train_arousal_reshaped.shape[1], X_train_arousal_reshaped.shape[2])
num_classes_arousal = y_arousal_categorical.shape[1]

model_arousal = build_resnet(input_shape_arousal, num_classes_arousal)
model_arousal.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)
model_arousal.fit(X_train_arousal_reshaped, y_train_arousal, epochs=10, batch_size=32, validation_split=0.1, callbacks=[early_stopping])

# Evaluation for arousal
y_pred_arousal = model_arousal.predict(X_test_arousal_reshaped)
y_pred_classes_arousal = np.argmax(y_pred_arousal, axis=1)
y_true_arousal = np.argmax(y_test_arousal, axis=1)

print("Arousal Classification Report:")
print(classification_report(y_true_arousal, y_pred_classes_arousal, target_names=encoder.classes_))